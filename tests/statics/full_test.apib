FORMAT: 1A
HOST: https://alpha-api.app.net
EXTRA_HOST: https://test.alpha-api.app.net

# Real World API
This API Blueprint demonstrates a real world example documenting a portion of
[App.net API](http://developers.app.net).

NOTE: This document is a **work in progress**.

# Group Posts
This section groups App.net post resources.

## Post [/stream/0/posts/{post_id}]
A Post is the other central object utilized by the App.net Stream API. It has
rich text and annotations which comprise all of the content a users sees in
their feed. Posts are closely tied to the follow graph...

+ Parameters
    + post_id: `1` (string) - The id of the Post.

+ Model (application/json)

    ```js
    {
        "data": {
            "id": "1", // note this is a string
            "user": {
                ...
            },
            "created_at": "2012-07-16T17:25:47Z",
            "text": "@berg FIRST post on this new site #newsocialnetwork",
            "html": "<span itemprop=\"mention\" data-mention-name=\"berg\" data-mention-id=\"2\">@berg</span> FIRST post on <a href=\"https://join.app.net\" rel=\"nofollow\">this new site</a> <span itemprop=\"hashtag\" data-hashtag-name=\"newsocialnetwork\">#newsocialnetwork</span>.",
            "source": {
                "client_id": "udxGzAVBdXwGtkHmvswR5MbMEeVnq6n4",
                "name": "Clientastic for iOS",
                "link": "http://app.net"
            },
            "machine_only": false,
            "reply_to": null,
            "thread_id": "1",
            "num_replies": 3,
            "num_reposts": 0,
            "num_stars": 0,
            "entities": {
                "mentions": [{
                    "name": "berg",
                    "id": "2",
                    "pos": 0,
                    "len": 5
                }],
                "hashtags": [{
                    "name": "newsocialnetwork",
                    "pos": 34,
                    "len": 17
                }],
                "links": [{
                    "text": "this new site",
                    "url": "https://join.app.net"
                    "pos": 20,
                    "len": 13
                }]
            },
            "you_reposted": false,
            "you_starred": false
        },
        "meta": {
            "code": 200,
        }
    }
    ```

### Retrieve a Post [GET]
Returns a specific Post.

+ Response 200

    [Post][]

### Update a Post [PUT]
Updates a specific Post.

+ Parameters
    + post_id: `2` (string) - The id of the Post.

+ Attributes
    + Key: `key` (string) - Key for the object
    + Object
        + Key1: `key1` (string) - Key1 for the object
        + Key2: `key2` (string) - Key2 for the object

+ Request (application/json)

+ Response 200

    [Post][]

### Delete a Post [DELETE]
Delete a Post. The current user must be the same user who created the Post. It
returns the deleted Post on success.

+ Response 204

## Posts Collection [/stream/0/posts]
A Collection of posts.

+ Model (application/json)

    ```js
    {
        "data": [
            {
                "id": "1", // note this is a string
                ...
            },
            {
                "id": "2",
                ...
            },
            {
                "id": "3",
                ...
            },
        ],
        "meta": {
            "code": 200,
        }
    }
    ```

### Create a Post [POST]
Create a new Post object. Mentions and hashtags will be parsed out of the post
text, as will bare URLs...

+ Request Normal

    [Post][]


+ Response 200 (application/schema+json ; hello=world)
    + Attributes
        + username: pavan

### Retrieve all Posts [GET]
Retrieves all posts.

+ Response 200

    [Posts Collection][]

## Stars [/stream/0/posts/{post_id}/star]
A User’s stars are visible to others, but they are not automatically added to
your followers’ streams.

+ Parameters
    + post_id: `1` (string) - The id of the Post.

### Star a Post [POST]
Save a given Post to the current User’s stars. This is just a “save” action,
not a sharing action.

*Note: A repost cannot be starred. Please star the parent Post.*

+ Response 200

    [Post][]

### Unstar a Post [DELETE]
Remove a Star from a Post.

+ Response 200 (application/xml)
    + Attributes
        + name: kyle

# Group Users

## User [/users]

### List all users [GET]

+ Relation: list

+ Response 200

        []

## User [/users/{id}]

+ Parameters
    + id: 23 (enum[number], optional) - Database ID

        Additional description

        + Default: 1

        + Members
            + 37 - Testing value
            + 1
            + 23

### Retrieve User [GET]
+ Request(application/json)
    + Headers

            X-server: nginx

+ Response 200 (application/json)

        {}

## Users [/users{?limit}]
Manipulate users.

### List Users [GET]

+ Parameters
    + limit (number, optional) - The maximum number of users to return.
        + Default: `20`

+ Response 200 (application/json)

        [
          {
            "username": "pksunkara"
          },
          {
            "username": "kylef"
          }
        ]

+ Response 203 (application/json)
    + Attributes (array[User, Org])

+ Request Only one user
    + Headers

            X-server: nginx

    + Parameters
        + limit: 1

+ Response 200 (application/json)

        [
          {
            "username": "pksunkara"
          }
        ]

## User [/users/{id}{?country,active,votes}]

### Retrieve User [GET]

+ Parameters
    + id: pavan (string, required) - Username
    + country
    + active (boolean)
    + votes (number)

+ Response 200 (application/json)

        {}

# Data Structures


## Org
+ name: Apiary

## User
User of the application

### Properties
+ username: pavan
+ id: 5 (number) - Id of the user
+ address
    + street
    + city
    + zip: 1234 (number) - zip description
    + *variable*: trololo
+ array (array) - array description
    - 3
    - 4
    - 5
+ inline array: 1,2,3 (array) - desc
+ multilined description - some dummy text

    and it continue there
    and will end there

## Item
+ Object (object)
    + string_l2 (string)
    + object_l2 (object)
        + string_l3 (string)
        + object_l3 (object)
            + string1_l4 (string)
            + string2_l4 (string)
            + string3_l4 (string)
